--- 
- 
  connection: local
  gather_facts: false
  hosts: localhost
  tasks: 
    - pip:
        name: boto  
    - 
      block: 
        - 
          ec2_instance_facts: 
            aws_access_key: "{{ ec2_access_key }}"
            aws_secret_key: "{{ ec2_secret_key }}"
            region: "{{ region }}"
          name: "Get instances facts"
          register: result
        - 
          debug: 
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ result.instances }}"
          name: "Instances ID"
      name: Facts
      tags: always

    - 
      block: 
        - 
          ec2_key: 
            aws_access_key: "{{ ec2_access_key }}"
            aws_secret_key: "{{ ec2_secret_key }}"
            key_material: "{{ lookup('file', '/home/ubuntu/.ssh/{{ key_name }}.pub') }}"
            name: "{{ key_name }}"
            region: "{{ region }}"
          name: "Upload public key to AWS"
        - 
          ec2_group: 
            aws_access_key: "{{ ec2_access_key }}"
            aws_secret_key: "{{ ec2_secret_key }}"
            description: "Sec group for app {{ id }}"
            name: "{{ sec_group }}"
            region: "{{ region }}"
            rules: 
              - proto: tcp
                from_port: 80
                to_port: 80
                cidr_ip: 0.0.0.0/0
                rule_desc: "allow all on ssh port"
              - proto: tcp 
                from_port: 22
                to_port: 80
                cidr_ip: 0.0.0.0/0
                rule_desc: "allow all on ssh port"
            rules_egress:
              - proto: all 
                cidr_ip: 0.0.0.0/0
          name: "Create security group"
          register: result_sec_group
        - 
          ec2: 
            aws_access_key: "{{ ec2_access_key }}"
            aws_secret_key: "{{ ec2_secret_key }}"
            count: 1
            group_id: "{{ result_sec_group.group_id }}"
            id: "{{ id }}"
            image: "{{ image }}"
            instance_type: t2.micro
            key_name: "{{ key_name }}"
            region: "{{ region }}"
            vpc_subnet_id: "subnet-0d4f9486d009cff8b" #"{{ vpc_subent_id }}"
            wait: true
            wait_timeout: 500
            assign_public_ip: yes
          name: "Provision instance"
          register: ec2_out
      
          #        - name: wait for SSH
          #wait_for: host={{ id.public_dns_name }} port=22 delay=60 timeout=320 state=started
          #with_name: '{{ ec2_out.instances }}'

      name: "2-Provisioning EC2 instances"
      tags: 
        - never
        - create_ec2

  vars: 
    id: web-app-2
    image: ami-0f93b5fd8f220e428
    key_name: ansible
    region: us-east-2
    sec_group: "{{ id }}-sec"
    vpc_subnet_id: "subnet-0d4f9486d009cff8b"

